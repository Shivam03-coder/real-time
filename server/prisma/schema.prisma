generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dashboards    Dashboard[]
  events        Event[]        @relation("UserEvents")
  notifications Notification[]
  presence      Presence?

  @@map("users")
}

model Dashboard {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  widgets   Json?    @default("[]")

  @@map("dashboards")
}

model Event {
  id        String    @id @default(uuid())
  type      EventType
  page      String
  sessionId String
  timestamp DateTime  @default(now())
  country   String?
  device    String?
  referrer  String?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], name: "UserEvents")

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@map("events")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      String   @default("info")
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

model Presence {
  id       String   @id @default(cuid())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  socketId String
  status   String   @default("online")
  lastSeen DateTime @default(now())

  @@index([status])
  @@map("presence")
}

enum EventType {
  page_view
  click
  session_end
}
